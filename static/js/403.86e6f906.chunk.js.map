{"version":3,"file":"static/js/403.86e6f906.chunk.js","mappings":"kQAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAHc,oCAMT,IAAMC,EAAc,mCAAG,sGACLF,EAAAA,EAAAA,IAAU,sBADL,uBACpBG,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,qDAKdC,EAAY,mCAAG,WAAOC,GAAP,yFACHL,EAAAA,EAAAA,IAAA,iBAAoBK,IADjB,uBAClBF,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZG,EAAc,mCAAG,WAAOC,GAAP,yFACLP,EAAAA,EAAAA,IAAA,gBAA2B,CAChDQ,OAAQ,CACND,MAAAA,KAHwB,uBACpBJ,EADoB,EACpBA,KADoB,kBAMrBA,GANqB,2CAAH,qD,+JCfdM,EAAYC,EAAAA,EAAAA,IAAH,uIAOTC,EAAaD,EAAAA,EAAAA,IAAH,6KAUVE,EAAYF,EAAAA,EAAAA,IAAH,yFAKTG,EAAWH,EAAAA,EAAAA,GAAH,+F,+ICmBrB,EAjCmB,SAAC,GAAgB,IAAdI,EAAa,EAAbA,OACdC,GAAWC,EAAAA,EAAAA,MACjB,OACE,SAAC,KAAD,UACGF,EAAOG,KAAI,gBAAGZ,EAAH,EAAGA,GAAIa,EAAP,EAAOA,eAAgBC,EAAvB,EAAuBA,YAAvB,OACV,SAAC,KAAD,WACE,UAAC,KAAD,CAAMC,MAAO,CAAEC,KAAMN,GAAYO,GAAE,iBAAYjB,GAA/C,WACE,SAAC,KAAD,CACEkB,IACEJ,EAAW,0CAC4BA,GAD5B,UAEJK,GAETC,IAAKP,KAEP,SAAC,KAAD,UAAWA,QAVEb,EADP,KAiBjB,E,4EC7BYqB,E,QAAkBhB,EAAAA,IAAH,6HCEtBiB,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAaH,OAbGA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,SAAAA,MACJ,WACE,OACE,SAACD,EAAD,WACE,SAAC,KAAD,CACEE,OAAO,MACPC,MAAM,MACNC,MAAM,UACNC,SAAS,EACTC,UAAU,4BAIjB,OAbGL,CAAeM,EAAAA,WAerB,ICKA,EAnBa,WACX,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOpB,EAAP,KAAeqB,EAAf,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KAQA,OAPAC,EAAAA,EAAAA,YAAU,WACRD,GAAa,IACbnC,EAAAA,EAAAA,MAAiBqC,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QACvBL,GAAU,OAAIK,IACdH,GAAa,EACd,GACF,GAAE,KAED,6BACE,2CACCD,IAAa,SAAC,EAAD,KACd,SAAC,EAAD,CAAYtB,OAAQA,MAGzB,C","sources":["api/moviesAPI.js","components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","pages/Home/Home.jsx"],"sourcesContent":["import axios from \"axios\";\nconst API_KEY = \"af36a8e543b2cdf1ea4b27ac643d9907\";\naxios.defaults.baseURL = \"https://api.themoviedb.org/3/\";\naxios.defaults.params = {\n  api_key: API_KEY,\n};\n\nexport const getTrendMovies = async () => {\n  const { data } = await axios.get(\"trending/movie/day\");\n  return data;\n};\n\nexport const getMovieById = async (id) => {\n  const { data } = await axios.get(`/movie/${id}`);\n  return data;\n};\n\nexport const getMovieByName = async (query) => {\n  const { data } = await axios.get(`/search/movie`, {\n    params: {\n      query,\n    },\n  });\n  return data;\n};\n","import styled from \"@emotion/styled\";\n\nexport const Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 200px);\n  gap: 16px;\n  justify-content: center;\n`;\n\nexport const MoviesCard = styled.div`\n  border: 1px solid: #fff;\n  background-color: #fff;\n  border-radius: 8px;\n  transform: scale(1);\n  &:hover {\n    transform: scale(1.05);\n  }\n`;\n\nexport const CardImage = styled.img`\n  border-top-left-radius: 8px;\n  border-top-right-radius: 8px;\n`;\n\nexport const CardName = styled.h3`\n  padding: 4px;\n  margin: 0px;\n  color: #fff;\n  text-align: center;\n`;\n","import { Link, useLocation } from \"react-router-dom\";\nimport {\n  Container,\n  MoviesCard,\n  CardImage,\n  CardName,\n} from \"./MoviesList.styled\";\nimport notFoundPoster from \"images/noFound/noImage.png\";\nimport PropTypes from \"prop-types\";\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <Container>\n      {movies.map(({ id, original_title, poster_path }) => (\n        <MoviesCard key={id}>\n          <Link state={{ from: location }} to={`movies/${id}`}>\n            <CardImage\n              src={\n                poster_path\n                  ? `https://image.tmdb.org/t/p/w342/${poster_path}`\n                  : `${notFoundPoster}`\n              }\n              alt={original_title}\n            />\n            <CardName>{original_title}</CardName>\n          </Link>\n        </MoviesCard>\n      ))}\n    </Container>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      original_title: PropTypes.string,\n      poster_path: PropTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default MoviesList;\n","import styled from \"@emotion/styled\";\n\nexport const LoaderContainer = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  opacity: 0.9;\n`;\n","import { Component } from 'react';\nimport { ThreeCircles } from 'react-loader-spinner';\nimport { LoaderContainer } from './Loader.styled';\n\nclass Loader extends Component {\n  render() {\n    return (\n      <LoaderContainer>\n        <ThreeCircles\n          height=\"150\"\n          width=\"150\"\n          color=\"#ffa500\"\n          visible={true}\n          ariaLabel=\"three-circles-rotating\"\n        />\n      </LoaderContainer>\n    );\n  }\n}\nexport default Loader;\n","import MoviesList from \"components/MoviesList\";\nimport { getTrendMovies } from \"api/moviesAPI\";\nimport Loader from \"components/Loader\";\nimport { useEffect, useState } from \"react\";\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    setIsLoading(true);\n    getTrendMovies().then(({ results }) => {\n      setMovies([...results]);\n      setIsLoading(false);\n    });\n  }, []);\n  return (\n    <main>\n      <h1>Trending today</h1>\n      {isLoading && <Loader />}\n      <MoviesList movies={movies} />\n    </main>\n  );\n};\n\nexport default Home;\n"],"names":["axios","api_key","getTrendMovies","data","getMovieById","id","getMovieByName","query","params","Container","styled","MoviesCard","CardImage","CardName","movies","location","useLocation","map","original_title","poster_path","state","from","to","src","notFoundPoster","alt","LoaderContainer","Loader","height","width","color","visible","ariaLabel","Component","useState","setMovies","isLoading","setIsLoading","useEffect","then","results"],"sourceRoot":""}